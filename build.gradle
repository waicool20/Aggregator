/*
 * GPLv3 License
 *  Copyright (c) aggregator by waicool20
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

group 'com.waicool20'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.1.2-2'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {

    /* kotlin */
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.14"

    compile group: 'com.rometools', name: 'rome', version: '1.7.2'

    compile group: 'com.frostwire', name: 'jlibtorrent', version: '1.2.0.9-RC1'
    if (isLinux()) compile group: 'com.frostwire', name: 'jlibtorrent-linux', version: '1.2.0.9-RC1'
    if (isWindows()) compile group: 'com.frostwire', name: 'jlibtorrent-windows', version: '1.2.0.9-RC1'
    if (isMac()) compile group: 'com.frostwire', name: 'jlibtorrent-macosx', version: '1.2.0.9-RC1'

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

mainClassName = "com.waicool20.aggregator.AggregatorKt"

kotlin {
    experimental {
        coroutines "enable"
    }
}

static Boolean isWindows() {
    return System.getProperty("os.name").toLowerCase().contains("window")
}

static Boolean isLinux() {
    return System.getProperty("os.name").toLowerCase().contains("linux")
}

static Boolean isMac() {
    return System.getProperty("os.name").toLowerCase().contains("mac")
}
